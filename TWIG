Twig
Create a basic login form twig template that can be used on both an admin and player site.
Inputs
username password, submit button
Template Variables
submitButtonHTML = ‘<input type=”submit” value=”Log In”/>’ loginHeaderText = ‘Log In’
isAdminLogin = true or false
totalSiteLogins = ‘0.00’
Criteria
1. Display totalSiteLogins variable below the form formatted as an integer. Ex: 2.00 should display as 2
2. Display the loginHeaderText variable above form.
3. If the template is being used on an admin site, display the text “ADMIN” prepended to
the loginHeaderText variable. This can be determined by the state of the isAdminLogin
variable.
4. Use the submitButtonHTML variable to display the form submit button.
5. The form does not have to be functional (no javascript or css necessary).

Answer
Note: I dont have experience with Twig so I will be providing highlevel description of the process. And some bits of codes to represent the process.

Login Form:
{% extends 'base.html.twig' %}

{% block title %}Log in!{% endblock %}

{% block body %}
<div class="loginHeaderText" data-text="Log In">Log In</div>
<form method="post">
    <h2>Sign in</h2>
    <label for="inputUsername" class="sr-only">Username</label>
    <input type="username" value="{{ last_username }}" name="username" id="inputUsername" class="form-control" placeholder="Username" required autofocus>
    <label for="inputPassword" class="sr-only">Password</label>
    <input type="password" name="password" id="inputPassword" class="form-control" placeholder="Password" required>
    <button class="submitButtonHTML" type="submit">Sign in</button>
</form>
<div class="totalSiteLogins" data-total=0></div>
{% endblock %}

Script:
//When a user clicks the submit button, a script will run.

Credential returnedCredential = checkValidity(username, password, isAdminLogin);
if(returnedCredential.login == true) {
    var userType = "USER";

    //Read from database and put the data into this variable
    var totalLogins = new databaseTotalLogins();
    //By using a method, retrieved the value.   
    val currentValue = totalLogins.retrievedValue();
    //increase the retrieved value by 1.
    val newValue = currentValue + 1;
    //By using a function save the new value back to the database
    saveNewTotal(newValue);
    //Parse the value into int for display purpose only
    var intValue = parseInt(newValue, 10);
    //if true, overwrite value of userType
    if(returnedCredential.isAdminLogin == true) {
        userType = "ADMIN"
    }
    //append in the dom by attributes
    attribute["text"] = userType;
    attribute["total"] = intValue;
}
else {
    //validations
}
